<nav aria-label="...">
    <ul class="pagination">
        <li class="page-item @PreviousItemClass">
            <a class="page-link" @onclick="Model!.PrevPageAsync" tabindex="-1">Previous</a>
        </li>
        @if (Model!.HasPrevPage) {
            <li class="page-item">
                <a class="page-link" @onclick="Model!.PrevPageAsync"> @(Model!.CurrentPage - 1)</a>
            </li>
        }

        <li class="page-item active">
            <a class="page-link">
                @Model!.CurrentPage <span class="sr-only">(current)</span>
            </a>
        </li>

        @if (Model!.HasNextPage) {
            <li class="page-item">
                <a class="page-link" @onclick="Model!.NextPageAsync">@(Model!.CurrentPage + 1)</a>
            </li>
        }

        <li class="page-item @NextItemClass">
            <a class="page-link" @onclick="Model!.NextPageAsync">Next</a>
        </li>
    </ul>
</nav>

@code
{
#nullable enable

    [Parameter]
    public IPagedCollectionViewModel? Model { get; set; }

    private string PreviousItemClass => Model!.HasPrevPage ? string.Empty : "disabled";

    private string NextItemClass => Model!.HasNextPage ? string.Empty : "disabled";

    protected override void OnParametersSet() {
        if (Model is null) {
            throw new InvalidOperationException("Model parameter is required.");
        }
    }

}