// Copyright (c) Sphere 10 Software. All rights reserved. (https://sphere10.com)
// Author: David Price
//
// Distributed under the MIT software license, see the accompanying file
// LICENSE or visit http://www.opensource.org/licenses/mit-license.php.
//
// This notice must not be removed when duplicating this file or its contents, in whole or in part.

<h3>Blazor Grid</h3>

@using System;
@using Microsoft.JSInterop
@using System.Collections.Generic;
@using System.Reflection;
@using Hydrogen;
@using Hydrogen.Communications;
@using UI.Controls.BlazorGrid.Classes;

@inject IJSRuntime JSRuntime

<meta charset="UTF-8">
<div class="ResizableClass">
    <button @onclick="ButtonClick">ReLoad</button>
    <button @onclick="ButtonClickClose">Close Connection</button>

    <table class="TableClass" style="width: 100%" id="@Id">
        <thead>
        <tr>
            @if ((GridType & GridTypes.ActionColumn) == GridTypes.ActionColumn) {
                <th style="width: 30px">
                    Actions<br/>
                    <div class="ResizableClass">
                        <input class="ResizableClass" type="search"/>
                    </div>
                </th>
            }

            @foreach (var headerCell in Header) {
                <th style="width: @headerCell.Width.ToString()px">
                    @headerCell.Name<br/>
                    <div class="ResizableClass">
                        <input class="ResizableClass" type="search"/>
                    </div>
                </th>
            }

            @foreach (object column in ColumnDefinitions) {
                <th style="width: 40px">
                    @GetColumnName(column)
                    <div class="ResizableClass">
                        <input class="ResizableClass" type="search"/>
                    </div>
                </th>
            }

        </tr>
        </thead>
        <tbody>
        @foreach (var row in Rows) {
            <tr @onmousedown="@(e => OnTableRowMouseDown())" @onmouseup="@(e => OnTableMouseUp(row))">

                @if ((GridType & GridTypes.ActionColumn) == GridTypes.ActionColumn) {
                    <td style="width: 30px">
                        @foreach (var action in Actions) {
                            if (action.IsActionAvailable != null && action.IsActionAvailable((TItem)row[0].Tag)) {
                                <button title="@action.Name" class="btn btn-success ActionButton" @onclick="@(e => action.ActionWork((TItem)row[0].Tag))">
                                    @action.IconURL
                                </button>
                            }
                        }

                    </td>
                }

                @foreach (var cell in row) {
                    <td style="width: @cell.Width.ToString()px">
                        <input class="ResizableClass" type="@cell.GetInputType()" list="@cell.GetListName()" value="@cell.Text"
                               @onchange="@(e => CellDataChanged(e.Value, cell.Name, cell))"
                               @onmouseup="CellMouseUp"/>
                    </td>
                }

                @foreach (object column in ColumnDefinitions) {
                    <td>
                        @RenderDataEnd((TItem)row[0].Tag, column)
                    </td>
                }

            </tr>
        }

        @*Make sure there are a full PageSize number of rows, for the paging info to be in the correct place*@
        @for (var i = Rows.Count; i < PageSize; i++) {
            <tr>
                @if ((GridType & GridTypes.ActionColumn) == GridTypes.ActionColumn) {
                    <td style="width: 30px"></td>
                }
                @foreach (var headerCell in Header) {
                    <td style="width: @(headerCell.Width)px">
                        <input class="ResizableClass" readonly>
                    </td>
                }
            </tr>
        }

        </tbody>
    </table>

    <footer>
        <div>
            @*Add the new button*@
            @if ((GridType & GridTypes.NewItem) != 0) {
                <button @onclick="PagingNew">New</button>
            }
            <button @onclick="PagingFirst">First</button>
            <button @onclick="PagingPrevious">Previous</button>

            <input class="PagingInput" type="number" min="0" max="@(TotalDataCount / PageSize)" step="1" pattern="[0-9]{10}" oninput="this.value=this.value.replace(/[^0-9]/g,'');"
                   value="@(CurrentPage + 1)" @onchange="@(e => PagingSetCurrentPage(e.Value))"/>
            of
            <input class="PagingInput" type="number" value="@(TotalDataCount / PageSize)" readonly/>

            <button @onclick="PagingNext">Next</button>
            <button @onclick="PagingLast">Last</button>
        </div>
    </footer>

    @*Add in the lists, these are for Enums, so they are only declared in one place each*@
    @foreach (var headerCell in Header) {
        if (headerCell.TypeInfo.IsEnum) {
            <datalist id="@headerCell.Name">
                @foreach (var enumValue in headerCell.TypeInfo.EnumValues) {
                    <option value="@enumValue">@enumValue</option>
                }
            </datalist>
        }
    }
</div>

<div class="modal" tabindex="-1" role="dialog" style="@GetContextMenuStyle()">
    <div class="modal-dialog" role="document" aria-hidden="true">
        <div class="modal-content" style="@GetContextMenuContentStyle()">
            <div class="modal-header">
                <h5 class="modal-title">Context Menu</h5>
            </div>
            <div class="modal-body">
                <p @onclick="ContextMenu1">Menu Item 1</p>
                <p @onclick="ContextMenu2">Menu Item 2</p>
                <p>-----------</p>
                <p @onclick="ContextMenu3">Menu Item 3</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseContextMenu">Close</button>
            </div>
        </div>
    </div>
</div>

<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#ContextMenuModal">Open Modal</button>

@*<div class="modal hidden" id="ContextMenuModal" role="dialog" style="@GetContextMenuStyle()">*@
<!--<div class="modal hidden" id="ContextMenuModal" role="dialog">
<div class="modal-dialog">-->
<!-- Modal content-->
<!--<div class="modal-content" style="@GetContextMenuContentStyle()">
    <div class="modal-header">
        <h5 class="modal-title">Context Menu</h5>
    </div>
    <div class="modal-body">
        <p @onclick="ContextMenu1">Menu Item 1</p>
        <p @onclick="ContextMenu2">Menu Item 2</p>
        <p>-----------</p>
        <p @onclick="ContextMenu3">Menu Item 3</p>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="CloseContextMenu">Close</button>
    </div>
</div>

</div>
</div>-->


@code
{
    @typeparam TItem
        [Flags]


    public enum GridTypes {
        DataSupplied = 1,
        DataOnDemand = 1 << 1,
        ActionColumn = 1 << 2,
        NewItem = 1 << 3
    }


    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    //[Parameter] public IDataSource<TItem> DataSource { get; set; }
    [Parameter]
    public ClientWebSocketsDataSource<TItem> DataSource { get; set; }

    [Parameter]
    public GridTypes GridType { get; set; }

    [Parameter]
    public List<GridAction<TItem>> Actions { get; set; }

    [Parameter]
    public List<object> ColumnDefinitions { get; set; }

    List<Cell> Header { get; set; } = new List<Cell>();
    List<List<Cell>> Rows { get; set; } = new List<List<Cell>>();
    List<TItem> Data { get; set; } = new List<TItem>();
    int CurrentPage { get; set; }
    int TotalDataCount { get; set; }

    int DefaultRowHeight = 20;
    //int DefaultCellWidth = 40;
    static bool FirstLoad = true;

    static Random Random { get; set; } = new Random((int)DateTime.Now.Ticks);

    #region Javascript

    void Alert(string text) {
        JSRuntime.InvokeAsync<object>("AlertWrite", text);
    }

    #endregion

    #region Grid

    protected override void OnInitialized() {
        if (FirstLoad) {
            DataSource.MutatedItems += HandleRemoteDataChange;
            FirstLoad = false;
        }

        ControlCheck();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) {
            await LoadJavascript();
        }
    }

    public async Task LoadJavascript() {
        await JSRuntime.InvokeAsync<object>("ResizableColumnTable", new object[] {
            Id
        });
    }

    void ControlCheck() {
    //Id
    //GridType
    //Data
    //PageSize
    //if (GetPageDataFunction == null) throw new Exception("GetPageDataFunction == null");
    //if (GetDataCountFunction == null) throw new Exception("GetDataCountFunction == null");
    //if (SetItemDataFunction == null) throw new Exception("SetItemDataFunction == null");
    //if (ItemDataChangedFunction == null) throw new Exception("ItemDataChangedFunction == null");
    }

    void DrawGrid() {
        Header.Clear();
        Rows.Clear();

        var width = HeaderData.DefaultWidth;
        var height = DefaultRowHeight;

        if (Data.Any()) {
            var first = Data.First();
            var type = first.GetType();
            var properties = type.GetProperties().ToList();
            var typeInfos = new List<ObjectTypeInfo>();

            foreach (var property in properties) {
                var name = Utility.AddSpacesForCamelCase(property.Name);

                var typeInfo = new ObjectTypeInfo(property);
                typeInfos.Add(typeInfo);

                Header.Add(new Cell(new HeaderData(name, width), new RowData(height), typeInfo, name, name, typeInfos.Count - 1));
            }

            foreach (var dataObject in Data) {
                var rowData = new List<Cell>();
                int columnIndex = 0;

                foreach (var property in properties) {
                    var cellText = Cell.GetCellText(dataObject, property);
                    var cellData = new Cell(Header[columnIndex].Header, Header[columnIndex].Row, typeInfos[columnIndex], cellText, dataObject, columnIndex);

    //var cellData = new Cell(Header[columnIndex].Header, Header[columnIndex].Row, typeInfos[columnIndex], properties[columnIndex], dataObject, columnIndex);
                    rowData.Add(cellData);
                    columnIndex++;
                }

                Rows.Add(rowData);
            }
        }

    //JSRuntime.InvokeAsync<object>("ResizableColumnTable", new object[] { Id }, DotNetObjectReference.Create<BlazorGrid<TItem>>(this));

        StateHasChanged();
    }

    private bool CellContextMenu(object entity) {
        return false;
    }

    string GetTableStyle() {
        var rowHeight = DefaultRowHeight;
        if (Rows.Any() && Rows[0].Any()) {
            rowHeight = Rows[0][0].Height;
        }

        var tableHeight = rowHeight * PageSize;

    //      return $"width: 100%; height: {tableHeight};";
        return $"width: 100%; height: 100%;";
    }

    string GetContextMenuStyle() {
    //       if (MenuShown) return $"display:block; top: {MenuX}px; left:{MenuY}px;";
        if (MenuShown) return $"display:block;";

        return "display:hidden";
    }

    string GetContextMenuContentStyle() {
        return $"width:200px; height:300px; left:{MenuX}px;top:{MenuY}px;";
    }

    string GetActionButtonItem(GridAction<TItem> item) {
        return $"<i class=\"{item.IconURL} btn btn-success\"></i>";
    }

    void CloseContextMenu() {
        CloseMenu();
    }

    void CellMouseUp(MouseEventArgs args) {
        if (args.Button == 2) {
            OpenMenu((int)args.ClientX - 650, (int)args.ClientY - 30);
        }
    }

    void OnTableRowMouseDown() {

    }

    void OnTableMouseUp(List<Cell> cells) {

    }

    void HandleRemoteDataChange(DataSourceMutatedItems<TItem> items) {

        var updates = items.UpdatedItems.ToList();

        SystemLog.Info($"BlazorGrid HandleRemoteDataChange() Items TotalItems {items.TotalItems} Updates Count {updates.Count}");

        if (updates.Any(x => x.CrudAction == CrudAction.Create || x.CrudAction == CrudAction.Read)) {
            Data.Clear();
        }

        foreach (var update in updates) {
            var updateId = DataSource.IdItem(update.Item);
            switch (update.CrudAction) {
                case CrudAction.Create:
                    Data.Add(update.Item);
                    break;

                case CrudAction.Read:
                    Data.Add(update.Item);
                    break;

                case CrudAction.Update:
    // this is inefficient
                    for (var i = Data.Count - 1; i >= 0; i--) {
                        var data = Data[i];
                        var id = DataSource.IdItem(data);
                        if (id == updateId) {
                            Data[i] = update.Item;
                        }
                    }
                    break;

                case CrudAction.Delete:
    // this is inefficient
                    for (var i = Data.Count - 1; i >= 0; i--) {
                        var data = Data[i];
                        var id = DataSource.IdItem(data);
                        if (id == updateId) {
                            Data.RemoveAt(i);
                        }
                    }
                    break;

                default:
                    SystemLog.Error($"XXXXXXXX BlazorGrid HandleRemoteDataChange() default");
                    break;
            }
        }

        TotalDataCount = items.TotalItems;
    //CurrentPage = items.CurrentPage;
        DrawGrid();
    //StateHasChanged(); 
    }

    #endregion

    async private void CellDataChanged(object valueObject, string dataName, Cell cell) {
        var newValue = valueObject.ToString();

    // update the underlying value in the cell
        cell.UpdateData(newValue);

    //Alert(cell.Tag.ToString());
        SystemLog.Info(cell.Tag.ToString());

    // return the updated underlying value to the DataSource
        var itemInList = new List<TItem>() {
            (TItem)cell.Tag
        };

        try {
            DataSource.UpdateDelayed(itemInList);
        } catch (Exception ex) {
        }
    }

    void ButtonClick() {
        GetPageAndDisplayData();
    }

    void ButtonClickClose() {
        DataSource.Close();
        DataSource = null;
    }

    #region Custom Columns

    private RenderFragment RenderDataEnd(TItem item, object dataEndObject) => builder => { ((dynamic)dataEndObject).Render(item, builder); };

    string GetColumnName(object column) {
        return ((dynamic)column).Name;
    }

    #endregion

    #region Context Menu

    bool MenuShown { get; set; }
    int MenuX { get; set; }
    int MenuY { get; set; }

    void OpenMenu(int menuX, int menuY) {
    //        Alert($"X: {menuX} Y: {menuY}");

        MenuX = menuX;
        MenuY = menuY;
        MenuShown = true;
    //        StateHasChanged();
    }

    void CloseMenu() {
        MenuShown = false;
    //        StateHasChanged();
    }

    void ContextMenu1() {
        Alert("1");
    }

    void ContextMenu2() {
        Alert("2");
    }

    void ContextMenu3() {
        Alert("3");
    }

    #endregion

    #region Paging

    //   async Task PagingNew() {
    void PagingNew() {
        DataSource.NewDelayed(10);
        GetPageAndDisplayData();
    }

    void PagingFirst() {
        CurrentPage = 0;
        GetPageAndDisplayData();
    }

    void PagingPrevious() {
        if (CurrentPage == 0) return;
        CurrentPage--;
        GetPageAndDisplayData();
    }

    void PagingNext() {
    //(TotalDataCount / PageSize)
    //(CurrentPage + 1)
    //of
    //(TotalDataCount / PageSize)

        if (CurrentPage + 1 < (TotalDataCount / PageSize)) {
            CurrentPage++;
            GetPageAndDisplayData();
        }
    }

    void PagingSetCurrentPage(object newCurrentPage) {
        var maxPage = TotalDataCount / PageSize;
        var currentPage = int.Parse(newCurrentPage.ToString());
        if (currentPage < 0) CurrentPage = 0;
        else if (currentPage > maxPage) CurrentPage = maxPage;
        else CurrentPage = currentPage;
        GetPageAndDisplayData();
    }

    void PagingLast() {
    // callback to the server
        var total = DataSource.Count.Result;
        CurrentPage = total / PageSize;
        GetPageAndDisplayData();
    }

    //   async Task<bool> GetPageAndDisplayData()
    void GetPageAndDisplayData() {
        try {
            DataSource.ReadDelayed("", PageSize, CurrentPage, "", SortDirection.Ascending);

    //var useCurrentPage = CurrentPage;
    //Data = (await DataSource.Read("", PageSize, ref useCurrentPage, "", SortDirection.Ascending, out int totalItems)).ToList();
    //TotalDataCount = totalItems;
    //CurrentPage = useCurrentPage;
    //LoadData();
    //StateHasChanged();
        } catch (Exception ex) {

        }

    // callback to the server
    //SystemLog.Info($"GetPageAndDisplayData()");
    }

    #endregion
}