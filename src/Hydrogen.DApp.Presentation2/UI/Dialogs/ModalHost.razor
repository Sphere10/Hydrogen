// Copyright (c) Sphere 10 Software. All rights reserved. (https://sphere10.com)
// Author: Hamish Rose
//
// Distributed under the MIT software license, see the accompanying file
// LICENSE or visit http://www.opensource.org/licenses/mit-license.php.
//
// This notice must not be removed when duplicating this file or its contents, in whole or in part.

@using Microsoft.JSInterop
@using Hydrogen.DApp.Presentation2.Logic.Modal

<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modal">
    @Content
</div>

@code
{
    /// <summary>
    /// Gets or sets the modal host content render fragment.
    /// </summary>
    [Parameter]
    public RenderFragment Content { get; set; }

    /// <summary>
    /// Gets or sets the JS runtime object.
    /// </summary>
    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    /// <summary>
    /// The hosted modal component instance.
    /// </summary>
    private ModalComponent _modalComponent;

    /// <summary>
    /// Show the modal - modal host is made visible and an instance of component <typeparam name="T"></typeparam> is
    /// rendered in the modal host. This method when awaited will return once the modal has been closed. <see cref="ModalResult"/> return
    /// value is retrieved from ModalComponent and returned once finished.
    /// </summary>
    /// <param name="parameters"> optional parameters to pass to modal component.</param>
    /// <param name="options"> modal options</param>
    /// <typeparam name="T"> type of modal component to be rendered in the host</typeparam>
    /// <returns> modal result.</returns>
    public async Task<ModalResult> ShowAsync<T>(ParameterView parameters, ModalOptions options = null) where T : ModalComponent {
        Content = builder => {
            int seq = 0;
            builder.OpenComponent<T>(seq);

            builder.AddAttribute(seq++, nameof(ModalComponent.Options), options);

            foreach (var parameterValue in parameters) {
                builder.AddAttribute(seq++, parameterValue.Name, parameterValue.Value);
            }

            builder.AddComponentReferenceCapture(seq++, o => _modalComponent = (ModalComponent)o);
            builder.CloseComponent();
        };

        StateHasChanged();

        await AwaitModalComponentRender();

        await ShowModalAsync();
        await DispatchContentLoadedEventAsync();

        ModalResult result = await _modalComponent!.ShowAsync();
        await HideModalAsync();

        _modalComponent = null;
        Content = null;

        StateHasChanged();

        return result;
    }

    private async Task DispatchContentLoadedEventAsync() {
        await JsRuntime.InvokeVoidAsync("dispatchContentLoadedEvent");
    }

    /// <summary>
    /// Delays until the modal content component has been rendered and the component reference is no longer null.
    /// </summary>
    /// <returns> a task. modal content is rendered and ref available once complete</returns>
    private async Task AwaitModalComponentRender() {
        int attempts = 100;
        while (_modalComponent is null && attempts >= 0) {
            attempts--;
            await Task.Delay(5);
        }

        if (_modalComponent is null) {
            throw new InvalidOperationException("Modal content did not render in time.");
        } else {
            await _modalComponent.ModalRendered;
        }
    }

    private async Task ShowModalAsync() => await JsRuntime.InvokeVoidAsync("showModal");

    private async Task HideModalAsync() => await JsRuntime.InvokeVoidAsync("hideModal");
}