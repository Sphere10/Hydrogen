// Copyright (c) Sphere 10 Software. All rights reserved. (https://sphere10.com)
// Author: Hamish Rose
//
// Distributed under the MIT software license, see the accompanying file
// LICENSE or visit http://www.opensource.org/licenses/mit-license.php.
//
// This notice must not be removed when duplicating this file or its contents, in whole or in part.

@using Hydrogen.DApp.Presentation2.Logic.Wizard
@inherits ModalComponent

<ModalTemplate OnCloseFunc="RequestCloseAsync" Options="@Options">
    <HeaderTemplate>
        <h6 class="card-title"> @_wizardHost?.Title </h6>
    </HeaderTemplate>
    <BodyTemplate>
        <CascadingValue Value="@Wizard">
            <CascadingValue Name="@nameof(OnFinished)" Value="@OnFinished">
                <CascadingValue Name="@nameof(OnCancelled)" Value="@OnCancelled">
                    <CascadingValue Name="@nameof(OnStepChange)" Value="@OnStepChange">

                        <WizardHost @ref="@_wizardHost"/>

                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </BodyTemplate>
</ModalTemplate>

@code
{
    /// <summary>
    /// Wizard host
    /// </summary>
    private WizardHost _wizardHost;

    /// <summary>
    /// Gets or sets the wizard render fragment
    /// </summary>
    [Parameter]
    public IWizard Wizard { get; set; }

    /// <summary>
    /// Gets or sets the call back the wizard will use when finished to signal the completion of the
    /// modal interaction.
    /// </summary>
    private EventCallback OnFinished { get; set; }

    /// <summary>
    /// Gets or sets the on cancelled call back the wizard will use when cancellation is requested.
    /// </summary>
    private EventCallback OnCancelled { get; set; }

    /// <summary>
    /// Gets or sets the event callback passed to child components to notify the wizard modal
    /// of step change.
    /// </summary>
    private EventCallback OnStepChange { get; set; }

    /// <inheritdoc />
    protected override void OnParametersSet() {
        base.OnParametersSet();

        if (Wizard is null) {
            throw new InvalidOperationException("Wizard parameter is required");
        }

        OnFinished = EventCallback.Factory.Create(this, Ok);
        OnCancelled = EventCallback.Factory.Create(this, Cancel);
        OnStepChange = EventCallback.Factory.Create(this, StateHasChanged);
    }

    /// <summary>
    /// Modal closed result. Passes request to the wizard instance to determine whether close OK.
    /// </summary>
    public override async Task<bool> RequestCloseAsync() {
        Result<bool> result = await Wizard.CancelAsync();

        if (result) {
            await base.RequestCloseAsync();
            return result;
        } else {
            _wizardHost.ErrorMessages.Clear();
            _wizardHost.ErrorMessages.AddRange(result.ErrorMessages);
            return result;
        }
    }
}